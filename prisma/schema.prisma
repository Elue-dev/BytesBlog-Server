generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
   id String @id @default(uuid())
   firstName String
   lastName String
   avatar String
   email String
   password String
   interests String[]
   bio String @db.VarChar(200)
   withGoogle Boolean @default(false)
   comments Comment[]
   posts Post[]
   likes Like[]
   bookmarks Bookmark[]
   joinedAt  DateTime @default(now())
   lastUpdated  DateTime @updatedAt

    @@map(name: "users")
}

model Post {
  id String @id @default(uuid())
  image String
  title String
  content String
  slug String @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  readTime Int
  categories String[]
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  comments Comment[]
  likes Like[]
  bookmarks Bookmark[]

   @@map(name: "posts")
}

model Comment {
   id String @id @default(uuid())
   message String
   createdAt  DateTime @default(now())
   updatedAt  DateTime @updatedAt
   author User  @relation(fields: [authorId], references: [id],  onDelete: Cascade)
   authorId   String
   post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
   postId String
   parent Comment? @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
   children Comment[] @relation("ParentChild")
   parentId String?
   likes Like[]

    @@map(name: "comments")
}

model Like {
  id String @id @default(uuid())
  type String
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?

  @@index([userId, postId])
  @@index([userId, commentId])
   @@map(name: "likes")
}

model Bookmark {
  id String @id @default(uuid())
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  createdAt  DateTime @default(now())

   @@map(name: "bookmarks")
}

model Token {
  id String @id @default(uuid())
  token String
  userId String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map(name: "token")
}
